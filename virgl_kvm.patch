From bf86bef7b3bc616c5462d13726863c5d17adc744 Mon Sep 17 00:00:00 2001
From: Lizhi Hou <lizhi.hou@amd.com>
Date: Thu, 1 May 2025 10:48:38 -0700
Subject: [PATCH 2/3] drm_render: Added amdxdna changes for kvm

kvm syncs up with latest virglrenderer

Signed-off-by: Lizhi Hou <lizhi.hou@amd.com>
---
 config.h.meson         |  1 +
 meson.build            |  6 ++++++
 meson_options.txt      |  1 +
 src/drm/drm_renderer.c | 25 ++++++++++++++++++++-----
 src/drm/drm_renderer.h |  6 +++---
 src/drm_hw.h           |  1 +
 src/meson.build        | 11 +++++++++++
 src/virglrenderer.c    | 11 +++++++++--
 8 files changed, 52 insertions(+), 10 deletions(-)

diff --git a/config.h.meson b/config.h.meson
index eeabd05..b92d614 100644
--- a/config.h.meson
+++ b/config.h.meson
@@ -41,6 +41,7 @@
 #mesondefine ENABLE_DRM
 #mesondefine ENABLE_DRM_MSM
 #mesondefine ENABLE_DRM_AMDGPU
+#mesondefine ENABLE_DRM_AMDXDNA
 #mesondefine ENABLE_RENDER_SERVER
 #mesondefine ENABLE_RENDER_SERVER_WORKER_PROCESS
 #mesondefine ENABLE_RENDER_SERVER_WORKER_THREAD
diff --git a/meson.build b/meson.build
index df13293..82ca52f 100644
--- a/meson.build
+++ b/meson.build
@@ -105,6 +105,11 @@ if with_drm_amdgpu
   conf_data.set('ENABLE_DRM_AMDGPU', 1)
 endif
 
+with_drm_amdxdna = drm_renderers.contains('amdxdna')
+if with_drm_amdxdna
+  conf_data.set('ENABLE_DRM_AMDXDNA', 1)
+endif
+
 with_drm_renderers = drm_renderers.length() > 0
 
 libdrm_dep = dependency('libdrm', version : '>=2.4.50', required: with_drm_renderers or get_option('video'))
@@ -435,4 +440,5 @@ summary({'c_args': (' ').join(get_option('c_args')),
         'fuzzer': with_fuzzer,
         'tracing': with_tracing,
         'unstable-apis': with_unstable_apis,
+        'drm-amdxdna': with_drm_amdxdna,
         }, section: 'Configuration')
diff --git a/meson_options.txt b/meson_options.txt
index c470d58..aa38c30 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -72,6 +72,7 @@ option(
   choices : [
     'amdgpu-experimental',
     'msm',
+    'amdxdna',
   ],
   description : 'List of drm native-context renderers to build'
 )
diff --git a/src/drm/drm_renderer.c b/src/drm/drm_renderer.c
index 64c960f..39829ce 100644
--- a/src/drm/drm_renderer.c
+++ b/src/drm/drm_renderer.c
@@ -25,6 +25,11 @@
 #  include "amdgpu/amdgpu_renderer.h"
 #endif
 
+#ifdef ENABLE_DRM_AMDXDNA
+#  include "amdxdna/amdxdna_npu.h"
+#endif
+
+
 static struct virgl_renderer_capset_drm capset;
 
 static const struct backend {
@@ -49,6 +54,14 @@ static const struct backend {
       .create = amdgpu_renderer_create,
    },
 #endif
+#ifdef ENABLE_DRM_AMDXDNA
+   {
+      .context_type = VIRTGPU_DRM_CONTEXT_AMDXDNA,
+      .name = "amdxdna_accel_driver",
+      .probe = amdxdna_npu_probe,
+      .create = amdxdna_npu_create,
+   },
+#endif
 };
 
 int
@@ -128,7 +141,7 @@ drm_renderer_capset(void *_c)
 }
 
 struct virgl_context *
-drm_renderer_create(size_t debug_len, const char *debug_name)
+drm_renderer_create(int drm_fd, size_t debug_len, const char *debug_name)
 {
    for (unsigned i = 0; i < ARRAY_SIZE(backends); i++) {
       const struct backend *b = &backends[i];
@@ -136,8 +149,10 @@ drm_renderer_create(size_t debug_len, const char *debug_name)
       if (b->context_type != capset.context_type)
          continue;
 
-      int fd = drmOpenWithType(b->name, NULL, DRM_NODE_RENDER);
-      if (fd < 0)
+      if (drm_fd < 0)
+         drm_fd = drmOpenWithType(b->name, NULL, DRM_NODE_RENDER);
+
+      if (drm_fd < 0)
          return NULL;
 
       if (debug_len && debug_name) {
@@ -145,10 +160,10 @@ drm_renderer_create(size_t debug_len, const char *debug_name)
             .name_len = debug_len,
             .name = (uint64_t) debug_name
          };
-         drmIoctl(fd, DRM_IOCTL_SET_CLIENT_NAME, &n);
+         drmIoctl(drm_fd, DRM_IOCTL_SET_CLIENT_NAME, &n);
       }
 
-      return b->create(fd, debug_len, debug_name);
+      return b->create(drm_fd, debug_len, debug_name);
    }
 
    return NULL;
diff --git a/src/drm/drm_renderer.h b/src/drm/drm_renderer.h
index 9ff4449..b0e1881 100644
--- a/src/drm/drm_renderer.h
+++ b/src/drm/drm_renderer.h
@@ -14,7 +14,7 @@
 
 #include "virgl_util.h"
 
-#if defined(ENABLE_DRM_MSM) || defined(ENABLE_DRM_AMDGPU)
+#if defined(ENABLE_DRM_MSM) || defined(ENABLE_DRM_AMDGPU) || defined(ENABLE_DRM_AMDXDNA)
 
 int drm_renderer_init(int drm_fd);
 
@@ -24,7 +24,7 @@ void drm_renderer_reset(void);
 
 size_t drm_renderer_capset(void *capset);
 
-struct virgl_context *drm_renderer_create(size_t debug_len, const char *debug_name);
+struct virgl_context *drm_renderer_create(int drm_fd, size_t debug_len, const char *debug_name);
 
 #else /* ENABLE_DRM_MSM */
 
@@ -52,7 +52,7 @@ drm_renderer_capset(UNUSED void *capset)
 }
 
 static inline struct virgl_context *
-drm_renderer_create(UNUSED size_t debug_len, UNUSED const char *debug_name)
+drm_renderer_create(UNUSED int drm_fd, UNUSED size_t debug_len, UNUSED const char *debug_name)
 {
    return NULL;
 }
diff --git a/src/drm_hw.h b/src/drm_hw.h
index 157465b..a34f557 100644
--- a/src/drm_hw.h
+++ b/src/drm_hw.h
@@ -30,6 +30,7 @@ struct virgl_renderer_capset_drm {
    uint32_t version_patchlevel;
 #define VIRTGPU_DRM_CONTEXT_MSM      1
 #define VIRTGPU_DRM_CONTEXT_AMDGPU   2
+#define VIRTGPU_DRM_CONTEXT_AMDXDNA  3
    uint32_t context_type;
    uint32_t pad;
    union {
diff --git a/src/meson.build b/src/meson.build
index 64aae58..5ca03b3 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -117,6 +117,13 @@ drm_amdgpu_sources = [
    'drm/amdgpu/amdgpu_renderer.c',
 ]
 
+drm_amdxdna_sources = [
+   'drm/drm-uapi/amdxdna_accel.h',
+   'drm/amdxdna/amdxdna_proto.h',
+   'drm/amdxdna/amdxdna_npu.c',
+   'drm/amdxdna/amdxdna_npu.h',
+]
+
 proxy_sources = [
    'proxy/proxy_client.c',
    'proxy/proxy_common.c',
@@ -186,6 +193,10 @@ if with_drm_amdgpu
    virgl_depends += [libdrm_amdgpu_dep]
 endif
 
+if with_drm_amdxdna
+   virgl_sources += drm_amdxdna_sources
+endif
+
 if with_render_server
    virgl_sources += proxy_sources
 endif
diff --git a/src/virglrenderer.c b/src/virglrenderer.c
index bcb47ca..c9c5a33 100644
--- a/src/virglrenderer.c
+++ b/src/virglrenderer.c
@@ -243,11 +243,18 @@ int virgl_renderer_context_create_with_flags(uint32_t ctx_id,
          return EINVAL;
       ctx = proxy_context_create(ctx_id, ctx_flags, nlen, name);
       break;
-   case VIRTGPU_DRM_CAPSET_DRM:
+   case VIRTGPU_DRM_CAPSET_DRM: {
+      int drm_fd = -1;
+
       if (!state.drm_initialized)
          return EINVAL;
-      ctx = drm_renderer_create(nlen, name);
+
+      if (state.cbs->version >= 2 && state.cbs->get_drm_fd)
+         drm_fd = state.cbs->get_drm_fd(state.cookie);
+
+      ctx = drm_renderer_create(drm_fd, nlen, name);
       break;
+   }
    default:
       return EINVAL;
       break;
-- 
2.34.1

