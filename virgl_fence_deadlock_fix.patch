From 32e77c899e6dab9551077782c13010437ee9a46e Mon Sep 17 00:00:00 2001
From: Lizhi Hou <lizhi.hou@amd.com>
Date: Wed, 28 May 2025 08:31:45 -0700
Subject: [PATCH 3/3] drm: Fix possible deadlock on timeline pending_fences

When thread_sync() calls into fence_retire callback, deadlock can happen:
Thread1: thread_sync
           ->hold timeline->fence_mutex
             ->fence_retire()
               ->virtio_gpu_ctrl_response()
                 ->wait on BQL lock
Thread2: qemu_main_loop
           ->hold BQL lock
             ->drm_timeline_submit_fence()
               ->wait on timeline->fence_mutex

Signed-off-by: Lizhi Hou <lizhi.hou@amd.com>
---
 src/drm/drm_fence.c | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/src/drm/drm_fence.c b/src/drm/drm_fence.c
index 993cc48..0427f93 100644
--- a/src/drm/drm_fence.c
+++ b/src/drm/drm_fence.c
@@ -77,15 +77,16 @@ thread_sync(void *arg)
 
       mtx_unlock(&timeline->fence_mutex);
       ret = poll(&(struct pollfd){fence->fd, POLLIN}, 1, -1); /* wait forever */
-      mtx_lock(&timeline->fence_mutex);
-
       if (ret == 1) {
          drm_dbg("fence signaled: %p (%" PRIu64 ")", (void*)fence, fence->fence_id);
          timeline->fence_retire(timeline->vctx, timeline->ring_idx, fence->fence_id);
+         mtx_lock(&timeline->fence_mutex);
          drm_fence_destroy(fence);
+         continue;
       } else if (ret != 0) {
          drm_err("poll failed: %s", strerror(errno));
       }
+      mtx_lock(&timeline->fence_mutex);
    }
    mtx_unlock(&timeline->fence_mutex);
 
-- 
2.34.1

